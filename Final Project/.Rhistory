SATData <- read.csv("C:/Users/villegasj/OneDrive - Eastern Connecticut State University/3rd Year/Spring 2021/MAT 343 Data Analytics/Final Project/SATData.CSV")
View(SATData)
summary(SATData)
#### Number 1: Remove NA Values####
SATDataNA <- na.omit(SATData)
#### 2A. Create a new dataframe with just VSAT & MSAT####
SAT_VM <- SATDataNA[c("VSAT","MSAT")]
summary(SAT_VM)
#### 2B. Plot Math & Verbal Scores (Scatterplot)####
plot(MSAT ~ VSAT, data = SAT_VM)
#### Finding K value ####
wss <-  numeric(11)
for (k in 1:11) wss[k] <- sum(kmeans(SAT_VM, centers = k, nstart = 25)$withinss)
wss
plot(1:11, wss, type = "b", pch = 16, col = "blue", xlab = "Number of clusters", ylab = "wss")
#### Chose 3 as the K value. Now plot the clusters ####
(SAT_VM.3means <- kmeans(SAT_VM, centers = 3, nstart = 10))
KM$withinss
##### 3B. Make a plot of the three clusters #####
plot(SAT_VM[SAT_VM.3means$cluster == 1, ], col = "red",
xlim=c(min(SAT_VM[ ,1]),max(SAT_VM[ ,1])),
ylim=c(min(SAT_VM[ ,2]),max(SAT_VM[ ,2])))
points(SAT_VM[SAT_VM.3means$cluster == 2,], col = "blue")
points(SAT_VM[SAT_VM.3means$cluster == 3,], col = "seagreen")
points(SAT_VM.3means$centers,pch=2, col = "black")
##### 3C Change the scaling on the plot so that it goes from the full span of SAT scores: 200 - 800 ####
plot(SAT_VM[SAT_VM.3means$cluster == 1, ], col = "red",
xlim = c( 200, 800),
ylim = c( 200, 800))
points(SAT_VM[SAT_VM.3means$cluster == 2,], col = "blue")
points(SAT_VM[SAT_VM.3means$cluster == 3,], col = "seagreen")
plot(1:11, wss, type = "b", pch = 16, col = "blue", xlab = "Number of clusters", ylab = "wss")
#### 2B. Plot Math & Verbal Scores (Scatterplot)####
plot(MSAT ~ VSAT, data = SAT_VM)
grades1 <- read.csv("C:/Users/villegasj/OneDrive - Eastern Connecticut State University/3rd Year/Spring 2021/MAT 343 Data Analytics/Final Project/grades1.csv")
View(grades1)
plot(grades1)
View(grades1)
df = subset(grades1, select = -c(1) )
View(df)
##### #3B Make plot of WSS & number of ####
(KM <- kmeans(x, centers = 3, nstart = 10))
##### #3B Make plot of WSS & number of ####
(KM <- kmeans(df, centers = 3, nstart = 10))
KM$tot.withinss
wss <-  numeric(11)
for (k in 1:11) wss[k] <- sum(kmeans(df, centers = k, nstart = 25)$withinss)
wss
plot(1:11, wss, type = "b", pch = 16, col = "blue", xlab = "Number of clusters", ylab = "wss")
wss <-  numeric(25)
for (k in 1:11) wss[k] <- sum(kmeans(df, centers = k, nstart = 25)$withinss)
wss
plot(1:11, wss, type = "b", pch = 16, col = "blue", xlab = "Number of clusters", ylab = "wss")
wss <-  numeric(11)
wss <-  numeric(25)
for (k in 1:25) wss[k] <- sum(kmeans(df, centers = k, nstart = 25)$withinss)
wss
plot(1:25, wss, type = "b", pch = 16, col = "blue", xlab = "Number of clusters", ylab = "wss")
##### Final Project Part 2 ####
summary(grades1)
#### #2 Plot the dataframe ####
plot(grades1)
##### #3A remove student ID numbers ####
df = subset(grades1, select = -c(1) )
df
##### #3B Make plot of WSS & number of ####
(KM <- kmeans(df, centers = 3, nstart = 10))
KM$tot.withinss
wss <-  numeric(25)
for (k in 1:25) wss[k] <- sum(kmeans(df, centers = k, nstart = 25)$withinss)
wss
plot(1:25, wss, type = "b", pch = 16, col = "blue", xlab = "Number of clusters", ylab = "wss")
##### #3B Make plot of WSS & number of ####
(KM <- kmeans(df, centers = 3, nstart = 25))
KM$tot.withinss
wss <-  numeric(25)
for (k in 1:11) wss[k] <- sum(kmeans(df, centers = k, nstart = 25)$withinss)
wss
plot(1:25, wss, type = "b", pch = 16, col = "blue", xlab = "Number of clusters", ylab = "wss")
plot(1:11, wss, type = "b", pch = 16, col = "blue", xlab = "Number of clusters", ylab = "wss")
wss <-  numeric(25)
for (k in 1:11) wss[k] <- sum(kmeans(df, centers = k, nstart = 25)$withinss)
wss
plot(1:11, wss, type = "b", pch = 16, col = "blue", xlab = "Number of clusters", ylab = "wss")
wss <-  numeric(11)
for (k in 1:11) wss[k] <- sum(kmeans(df, centers = k, nstart = 25)$withinss)
wss
plot(1:11, wss, type = "b", pch = 16, col = "blue", xlab = "Number of clusters", ylab = "wss")
plot(1:11, wss, type = "b", pch = 16, col = "blue", xlab = "Number of clusters", ylab = "wss")
(Df.3means <- kmeans(df, centers = 3, nstart = 25))
Df.3means
plot(df$English[Df.3means$cluster == 1, ], col = "red",
xlim=c(min(df[ ,1]),max(df[ ,1])),
ylim=c(min(df[ ,2]),max(df[ ,2])))
plot(df$English[Df.3means$cluster == 1, ], col = "red",
xlim=c(min(df[ ,1]),max(df[ ,1])),
ylim=c(min(df[ ,2]),max(df[ ,2])))
plot(df[c("English","Math")], col = Df.3means)
View(df)
plot(df[c("English","Math")], col = Df.3means$cluster)
plot(df[c("English","Math")], col = Df.3means$cluster, pch = 16)
#Science versus English
plot(df[c("Science","English")], col = Df.3means$cluster, pch = 16)
#Science versus Math
plot(df[c("Science","Math")], col = Df.3means$cluster, pch = 16)
library(ggplot2)
grades2$cluster <- factor(KM$cluster)
df$cluster <- factor(KM$cluster)
centers <- as.data.frame(KM$centers)
#Here’s the code for my first plot, Math versus English
g1 <- ggplot(data=grades2,aes(x=English,y=Math,color = cluster))+
geom_point()+
geom_point(data=centers,
aes(x=English,y = Math, color =as.factor(c(1,2,3))),
size = 10,alpha = 0.3)
#Here’s the code for my first plot, Math versus English
g1 <- ggplot(data=df,aes(x=English,y=Math,color = cluster))+
geom_point()+
geom_point(data=centers,
aes(x=English,y = Math, color =as.factor(c(1,2,3))),
size = 10,alpha = 0.3)
g1
#Here’s the code for my first plot, Math versus English
g1 <- ggplot(data=df,aes(x=English,y=Math,color = cluster))+
geom_point()+
geom_point(data=centers,
aes(x=English,y = Math, color =as.factor(c(1,2,3))),
size = 10,alpha = 0.8)
g1
#Here’s the code for my first plot, Math versus English
g1 <- ggplot(data=df,aes(x=English,y=Math,color = cluster))+
geom_point()+
geom_point(data=centers,
aes(x=English,y = Math, color =as.factor(c(1,2,3))),
size = 10,alpha = 0.1)
g1
#Here’s the code for my first plot, Math versus English
g1 <- ggplot(data=df,aes(x=English,y=Math,color = cluster))+
geom_point()+
geom_point(data=centers,
aes(x=English,y = Math, color =as.factor(c(1,2,3))),
size = 10,alpha = 0.5)
g1
#Here’s the code for my first plot, Math versus English
g1 <- ggplot(data=df,aes(x=English,y=Math,color = cluster))+
geom_point()+
geom_point(data=centers,
aes(x=English,y = Math, color =as.factor(c(1,2,3))),
size = 10,alpha = 0.3)
g1
#Here’s the code for my first plot, Math versus English
g1 <- ggplot(data=df,aes(x=English,y=Math,color = cluster))+
geom_point()+
geom_point(data=centers,
aes(x=English,y = Math, color =as.factor(c(1,2,3))),
size = 6,alpha = 0.3)
g1
#Here’s the code for my first plot, Math versus English
g1 <- ggplot(data=df,aes(x=English,y=Math,color = cluster))+
geom_point()+
geom_point(data=centers,
aes(x=English,y = Math, color =as.factor(c(1,2,3))),
size = 10,alpha = 0.3)
g1
(g3 <- ggplot(data=df,aes(x=English,y=Math,color = cluster))+
geom_point()+
geom_point(data=centers,
aes(x=Science,y = Math, color =as.factor(c(1,2,3))),
size = 10,alpha = 0.3))
(g3 <- ggplot(data=df,aes(x=Science,y=Math,color = cluster))+
geom_point()+
geom_point(data=centers,
aes(x=Science,y = Math, color =as.factor(c(1,2,3))),
size = 10,alpha = 0.3))
#Here’s the code for my first plot, Math versus English
(g1 <- ggplot(data=df,aes(x=English,y=Math,color = cluster))+
geom_point()+
geom_point(data=centers,
aes(x=English,y = Math, color =as.factor(c(1,2,3))),
size = 10,alpha = 0.3))
#Here’s the code for my first plot, Math versus English
(g1 <- ggplot(data=df,aes(x=English,y=Math,color = cluster))+
geom_point()+
geom_point(data=centers,
aes(x=English,y = Math, color =as.factor(c(1,2,3))),
size = 10,alpha = 0.3))
(g2 <- ggplot(data=df,aes(x=Science,y=English,color = cluster))+
geom_point()+
geom_point(data=centers,
aes(x=Science,y = English, color =as.factor(c(1,2,3))),
size = 10,alpha = 0.3))
(g3 <- ggplot(data=df,aes(x=Science,y=Math,color = cluster))+
geom_point()+
geom_point(data=centers,
aes(x=Science,y = Math, color =as.factor(c(1,2,3))),
size = 10,alpha = 0.3))
##### #4a plot the clusters 2 variables at a time ####
#Math versus English
plot(df[c("English","Math")], col = Df.3means$cluster, pch = 16)
#Here’s the code for my first plot, Math versus English
(g1 <- ggplot(data=df,aes(x=English,y=Math,color = cluster))+
geom_point()+
geom_point(data=centers,
aes(x=English,y = Math, color =as.factor(c(1,2,3))),
size = 10,alpha = 0.3))
Df.3means
Df.3means$centers
library(plotly)
library(dplyr)
install.packages("plotly")
install.packages("plotly")
library(plotly)
library(dplyr)
source('C:/Users/villegasj/OneDrive - Eastern Connecticut State University/3rd Year/Spring 2021/MAT 343 Data Analytics/Final Project/Final Project Part 2.R')
install.packages("plotly")
install.packages("dplyr")
library(plotly)
library(dplyr)
p <- plot_ly(df, x=~English, y=~Math,
z=~Science, color=~cluster) %>%
add_markers(size=1.5)
print(p)
source('C:/Users/villegasj/OneDrive - Eastern Connecticut State University/3rd Year/Spring 2021/MAT 343 Data Analytics/Final Project/Final Project Part 2.R')
Data <- read.csv("C:/Users/villegasj/OneDrive - Eastern Connecticut State University/3rd Year/Spring 2021/MAT 343 Data Analytics/Final Project/Data.csv")
View(Data)
##### Part 3 of Final Project ####
summary(Data)
#### 1a. Remove NA's ####
Data2 <- na.omit(Data)
summary(Data2)
#### 1b. replace gender with M =1 & f =2. ####
Data2$Gender <- ifelse(Data2$Gender=="M",1,0)
#### 1c. replace The east.west.out with east =1, west = 1, & f =2. ####
Data2$East <- ifelse(Data2$East.West.Out=="east", 1,0)
Data2$West <- ifelse(Data2$East.West.Out=="west", 1,0)
#### 1d. Create a new variable ERG_low, which classifies schools ranked 5 â 9 as 1 (for low) and 0 (for high). ####
Data2$low <- (ifelse( <=5, 1, 0))
#### 1d. Create a new variable ERG_low, which classifies schools ranked 5 â 9 as 1 (for low) and 0 (for high). ####
Data2$low <- (ifelse( >= 5, 1, 0))
#### 1d. Create a new variable ERG_low, which classifies schools ranked 5 â 9 as 1 (for low) and 0 (for high). ####
Data2$low <- (ifelse( > 4, 1, 0))
#### 1d. Create a new variable ERG_low, which classifies schools ranked 5 â 9 as 1 (for low) and 0 (for high). ####
Data2$low <- (ifelse(Data2$ERG > 4, 1, 0))
View(Data2)
##### 1e. Remove the variable retained #####
Data2 = subset(Data2, select = -c(retained) )
##### 1e. Remove the variable retained #####
Data2 = subset(Data2, select = -c(Retained) )
summary(Data2)
##### 1.f Create an at risk varable ####
Data2$AtRisk <- (ifelse(Data2$X1st_yr_GPA < 2.3 , 1, 0))
##### 1.g normalize numeric data #####
min_max_norm <- function(x) {
(x - min(x)) / (max(x) - min(x))
}
summary(Data2)
##### Part 3 of Final Project ####
summary(Data)
#### 1a. Remove NA's ####
Data2 <- na.omit(Data)
#### 1a. Remove NA's ####
Data2 <- na.omit(Data)
summary(Data2)
##### Part 3 of Final Project ####
summary(Data)
Data<-Data[!(Data$East.West.Out==" ",]
Data<-Data[!(Data$East.West.Out==" "]
Data<-Data[!(Data$East.West.Out==" "),]
Data$East.West.Out
summary(Data$East.West.Out)
Data<-Data[!(Data$East.West.Out==""),]
summary(Data$East.West.Out)
#### 1a. Remove NA's ####
Data2 <- na.omit(Data)
summary(Data2)
Data2
#### 1b. replace gender with M =1 & f =2. ####
Data2$Gender <- ifelse(Data2$Gender=="M",1,0)
#### 1c. replace The east.west.out with east =1, west = 1, & f =2. ####
Data2$East <- ifelse(Data2$East.West.Out=="east", 1,0)
Data2$West <- ifelse(Data2$East.West.Out=="west", 1,0)
#### 1d. Create a new variable ERG_low, which classifies schools ranked 5 â 9 as 1 (for low) and 0 (for high). ####
Data2$low <- (ifelse(Data2$ERG > 4, 1, 0))
##### 1e. Remove the variable retained #####
Data2 = subset(Data2, select = -c(Retained) )
##### 1.f Create an at risk varable ####
Data2$AtRisk <- (ifelse(Data2$X1st_yr_GPA < 2.3 , 1, 0))
##### 1.g normalize numeric data #####
min_max_norm <- function(x) {
(x - min(x)) / (max(x) - min(x))
}
summary(Data2)
Data2_norm <- as.data.frame(lapply(Data2[2:5,9,10,12,13], min_max_norm))
Data2_norm <- as.data.frame(lapply(Data2[2:5,9,10], min_max_norm))
summary(Data2)
summary(Data2_norm)
Data2$East.West.Out = (Data2$East.West.Out- min(Data2$East.West.Out)/ max(Data2$East.West.Out)- min(Data2$East.West.Out))
Data2$VSAT = (Data2$VSAT- min(Data2$VSAT)/ max(Data2$VSAT)- min(Data2$VSAT))
summary(Data2$VSAT)
Data2$VSAT = (Data2$VSAT- min(Data2$VSAT))/ (max(Data2$VSAT)- min(Data2$VSAT))
summary(Data2$VSAT)
Data2$VSAT = (Data2$MSAT- min(Data2$MSAT))/ (max(Data2$MSAT)- min(Data2$MSAT))
summary(Data2$MSAT)
Data2$VSAT = (Data2$VSAT- min(Data2$VSAT))/ (max(Data2$VSAT)- min(Data2$VSAT))
Data2$MSAT = (Data2$MSAT- min(Data2$MSAT))/ (max(Data2$MSAT)- min(Data2$MSAT))
summary(Data2$MSAT)
Data2$WSAT = (Data2$WSAT- min(Data2$WSAT))/ (max(Data2$WSAT)- min(Data2$WSAT))
summary(Data2$WSAT)
Data2$HSRank = (Data2$HSRank- min(Data2$HSRank))/ (max(Data2$HSRank)- min(Data2$HSRank))
summary(Data2$HSRank)
Data2$HSGPA = (Data2$HSGPA- min(Data2$HSGPA))/ (max(Data2$HSGPA)- min(Data2$HSGPA))
summary(Data2$HSGPA)
summary(Data2)
Data2$X1st_yr_GPA = (Data2$X1st_yr_GPA- min(Data2$X1st_yr_GPA))/ (max(Data2$X1st_yr_GPA)- min(Data2$X1st_yr_GPA))
summary(Data2)
install.packages("caret")
library(caret)
set.seed(1717)
inTrain <- createDataPartition(y=Data2$X1st_yr_GPA,p=.8,list=FALSE)
training <- Data2[inTrain,]
library(caret)
inTrain <- createDataPartition(y=Data2$X1st_yr_GPA,p=.8,list=FALSE)
##### 3a. create a subset of the training data that contains only the variables Gender, VSAT, Housing, HSGPA, X1st_year_GPA ####
summary(Data2)
source('C:/Users/villegasj/OneDrive - Eastern Connecticut State University/3rd Year/Spring 2021/MAT 343 Data Analytics/Final Project/Final Project 3.R')
source('C:/Users/villegasj/OneDrive - Eastern Connecticut State University/3rd Year/Spring 2021/MAT 343 Data Analytics/Final Project/Final Project 3.R')
